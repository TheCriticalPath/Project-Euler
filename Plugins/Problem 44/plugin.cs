using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using PluginInterface;
using System.Windows.Forms;
using System.ComponentModel.Composition;
using Helpers;
using System.Numerics;
namespace Problem_44
{
    [Export(typeof(IEulerPlugin))]
    public class EulerPlugin : IEulerPlugin
    {
        public bool IsAsync { get { return true; } }

        public long _limit;
        public bool ImplementsGetInput { get { return true; } }
        public int ID { get { return 44; } }
        public string Name
        {
            get { return string.Format("Problem {0}: {1}", ID, Title); }
        }
        public string Title { get { return string.Format("Pentagon Numbers", ID); } }
        public string Description
        {
            get
            {
                return @"Pentagonal numbers are generated by the formula, Pn=n(3n−1)/2. The first ten pentagonal numbers are:

1, 5, 12, 22, 35, 51, 70, 92, 117, 145, ...

It can be seen that P4 + P7 = 22 + 70 = 92 = P8. However, their difference, 70 − 22 = 48, is not pentagonal.

Find the pair of pentagonal numbers, Pj and Pk, for which their sum and difference are pentagonal and D = |Pk − Pj| is minimised; what is the value of D?";
            }
        }
        public EulerPlugin() { }

        private long GetLimit()
        {
            long lngLimit = 0;
            string strLimit = "2500";

            while (lngLimit < 1)
            {
                Helpers.InputHelper.Show(Name, "Number of Entires", ref strLimit);
                if (!Int64.TryParse(strLimit, out lngLimit))
                {
                    lngLimit = 0;
                }

            }
            return lngLimit;
        }
        public void PerformGetInput(IEulerPluginContext context)
        {
            _limit = GetLimit();
        }
        public IEulerPluginContext PerformAction(IEulerPluginContext context)
        {
            DateTime dtStart, dtEnd;
            dtStart = DateTime.Now;
            context.strResultLongText = BruteForce();
            dtEnd = DateTime.Now;
            context.spnDuration = dtEnd.Subtract(dtStart);
            return context;
        }
        public Task<IEulerPluginContext> PerformActionAsync(IEulerPluginContext context)
        {
            return Task.Factory.StartNew(() =>
            {
                // need a more elegant solution.
                DateTime dtStart, dtEnd;
                dtStart = DateTime.Now;
                Task<String> s = BruteForceAsync();
                dtEnd = DateTime.Now;
                context.strResultLongText = s.Result;
                context.spnDuration = dtEnd.Subtract(dtStart);
                return context;
            });
        }

        public string BruteForce()
        {
            bool isFound = false;
            HashSet<Int64> pNums = new HashSet<Int64>();
            Int64 pSum = 0;
            Int64 pDif = 0;
            Int64 pMax = 0;
            for (int i = 0; i < _limit; i++)
            {
                pNums.Add( (Int64)(((3 * (i + 1) * (i + 1)) - (i + 1)) / 2));
            }

            foreach(Int64 n1 in pNums)
            {
                isFound = false;
                foreach (Int64 n2 in pNums) 
                {
                    if (n2 < n1) continue;
                    pSum = n1 + n2;
                    pDif = n2 - n1;
                    if (pNums.Contains(pSum) && pNums.Contains(pDif))
                    {
                        isFound = true;
                        break;
                    }
                }
                if (isFound) break;
            }
            if (isFound)
                return string.Format("D = {0}", pDif);
            else
                return string.Format("Nothing Found:  Increase limit.");
        }
        async Task<string> BruteForceAsync()
        {
            //return Brute2();
            return BruteForce();
        }

    }
}
